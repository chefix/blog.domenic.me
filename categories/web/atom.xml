<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: web | Hidden Variables]]></title>
  <link href="https://blog.domenic.me/categories/web/atom.xml" rel="self"/>
  <link href="https://blog.domenic.me/"/>
  <updated>2015-03-16T11:05:38+00:00</updated>
  <id>https://blog.domenic.me/</id>
  <author>
    <name><![CDATA[Domenic Denicola]]></name>
    <email><![CDATA[d@domenic.me]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Continual Progress in the W3C TAG]]></title>
    <link href="https://blog.domenic.me/continual-progress-in-the-w3c-tag/"/>
    <updated>2013-12-02T00:00:00+00:00</updated>
    <id>https://blog.domenic.me/continual-progress-in-the-w3c-tag</id>
    <content type="html"><![CDATA[<p>The W3C Technical Architecture Group has made immeasurable progress this year since
<a href="http://infrequently.org/2012/12/reforming-the-w3c-tag/">the original wave of reformist thought</a> swept through it last
election season. The extensible web agenda, which I&rsquo;ve
<a href="http://domenic.me/2013/10/07/the-extensible-web/">spoken about previously</a>, has been adopted into their vision for the
web&rsquo;s foundations and informed recent spec work across the W3C. The TAG even moved its deliverables
<a href="https://github.com/w3ctag/">onto GitHub</a>, allowing better collaboration with and transparency to developers.</p>

<p>But there&rsquo;s always more to do. The web is slowly but surely coming into its own as a serious modern development
platform—one which can compete with native apps across the board. New APIs, new primitives, and new tools are very much
necessary to make our open platform as attractive to developers and users as it could be. To lure them away from the
walled gardens of closed app stores and vendor-proprietary development platforms, we must provide something better.</p>

<p>The TAG is in a unique position to oversee these efforts, with its charter to steward the evolution of web architecture
and coordinate with other relevant groups like Ecma TC39 and the IETF. As such, I&rsquo;m excited to be
<a href="http://lists.w3.org/Archives/Public/www-tag/2013Dec/0004.html">running for TAG membership</a> in this
<a href="http://www.w3.org/blog/TAG/2013/11/06/tag-election-2013/">newest election cycle</a>.</p>

<p>Over the last year of my increasing involvement in web standards, I&rsquo;ve found two things to be paramount: <em>developer
involvement</em>, and <em>a focus on solid low-level primitives</em>. Independent of any formal role in the process, I have and
will continue to champion these causes. My nomination by the jQuery Foundation to serve on the TAG only allows me to
advocate them in a more formal role.</p>

<p>As a web developer myself, I experience the joys and disappointments of our platform every day. Some of you might think
it&rsquo;s all disappointments—and I can certainly sympathize, given our
<a href="https://twitter.com/domenic/status/403668805542354944">day-to-day frustrations</a>. But one of the more eye-opening
experiences of the last few months has been working alongside an experienced Java developer, new to the web platform,
and seeing his almost childlike glee at how <em>easy</em> it is to produce complex, interactive, and robust UIs. More
generally, when I think on what I actually do for a living at Lab49—produce complex financial trading and analysis
systems, built on the open web platform—it&rsquo;s hard not to be amazed. We&rsquo;ve come a long way from the time when only
desktop apps were considered for serious work. Now all our clients want cross-browser and cross-device web applications,
that they can access from any computer at any time, with shareable URLs and responsive experiences and all the other
things that come with the web.</p>

<p>To enable developers to build such increasingly powerful experiences, we need to listen to them. That&rsquo;s why I spend a
lot of time speaking at and traveling to developer conferences, or being involved on Twitter, on IRC, and on GitHub,
with the community. I recently gave a talk specifically on
<a href="https://www.youtube.com/watch?v=hneN6aW-d9w&amp;hd=1">how to get involved in web standards</a>, and have been working
constantly to get developer feedback on missing features or in-progress specs since then.</p>

<p>Developers are a tricky bunch, as many have been trained to ignore standards bodies and simply hack together their own
solutions. They&rsquo;re used to being ignored themselves. But times are changing. The
<a href="http://extensiblewebmanifesto.org/">extensible web manifesto</a> guides us to supply the web with the low-level features
developers need, and then to listen to them and roll what they build back into the platform. The TAG&rsquo;s role is helping
to guide this overall process, and I hope to bring along my experience listening to and learning from the developer
community.</p>

<p>You may have noticed I kept saying &ldquo;developers&rdquo; above, and never &ldquo;web developers.&rdquo; That&rsquo;s because I strongly believe we
need to look outside our own community for inspiration. There are lessons to be learned everywhere across the software
development landscape, from other UI frameworks and standard libraries, to other languages whose features we need in our
platform&rsquo;s <em>lingua franca</em> of JavaScript. Perhaps most importantly, I maintain strong ties with and involvement in the
Node.js community. They provide an excellent source of inspiration and advice, as a platform that takes JavaScript far
beyond where many of us would have envisioned it only a few years ago.</p>

<p>Which brings us to the issue of low-level primitives. Node&rsquo;s great success comes in a large part from its focus on
providing such primitives: things like standard patterns for binary data, for asynchrony, or for streaming. On top of
these they&rsquo;ve built <a href="http://nodejs.org/api/">a standard library</a> that should be the envy of any platform in both its
small size and in its power.</p>

<p>Of course, the web platform must by necessity evolve via consensus, and so more slowly than Node. But this gives us the
benefit of watching them run out ahead of us, make mistakes, and then come back with field reports on how it went. As
such we are getting typed arrays instead of buffers; promises instead of error-first callbacks; and
<a href="https://github.com/whatwg/streams/">intelligently-designed streams</a> instead of backward-compatible evolved ones. And
it&rsquo;s no coincidence that I&rsquo;ve been involved in both the promises and streams efforts, as I&rsquo;m very passionate about
ensuring that these foundational pieces of the platform are solid enough to build on and have learned from experiences
implementing them elsewhere.</p>

<p>But we&rsquo;re still in our infancy when it comes to building on these primitives. We need to tie them together with the rest
of the web platform. In short, we need to get to the day when the</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">http</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s2">&quot;http://example.com/video.mp4&quot;</span><span class="p">)</span>
    <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">videoProcessingWebWorker</span><span class="p">)</span>
    <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">query</span><span class="p">(</span><span class="s2">&quot;video&quot;</span><span class="p">))</span>
</code></pre></div>
<p><a href="https://github.com/whatwg/streams/blob/master/Requirements.md#you-must-be-able-to-transform-streams-via-the-pipe-chain">example</a>
is not just a dream, but is reality.</p>

<p>In my view, it&rsquo;s the TAG&rsquo;s job to get us there. The cross-group coordination issues necessary to make visions like this
a reality are a large part of the TAG&rsquo;s charter. We can provide a high-level vision, fueled by our interaction with the
developer community, for extending the web forward. And all the while, I&rsquo;ll be down in the trenches, both gathering
feedback to help shape this vision, and working on specifications and interfacing with implementers to make it happen.</p>

<p>If this sounds like progress to you, I&rsquo;d appreciate your organization&rsquo;s vote.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Extensible Web]]></title>
    <link href="https://blog.domenic.me/the-extensible-web/"/>
    <updated>2013-10-07T00:00:00+00:00</updated>
    <id>https://blog.domenic.me/the-extensible-web</id>
    <content type="html"><![CDATA[<p><em>This post adapts <a href="http://2013.jsconf.eu/speakers/#/speakers/domenic-denicola-the-extensible-web-javascript-all-the-way-down">my talk from JSConf EU 2013</a>.</em></p>

<p>The web platform has, historically, been somewhat of a kludge. It&rsquo;s grown, organically, into something with no real
sense of cohesion. Most of its APIs have been poorly designed, by C++ developers, via
<a href="http://www.omg.org/gettingstarted/omg_idl.htm">a binding layer meant originally for CORBA</a>.</p>

<p>Worse, there have been major gaps in what we can do compared to native apps. And for those things that we can do, we end
up accomplishing them by drowning ourselves in custom JavaScript functionality.</p>

<p>The problem is in the process. Generally, new things have been introduced into our web platform via a months or years of
mailing-list standardization, writing something in prose and IDL, driven by scenario-solving—without much concern for
actual utility, much less usability. Implementers expose some fundamental capability in terms of a high-level API or
declarative form that burrows down directly to the C++ layer, giving you limited customizability. After all this time,
it eventually ends up in your hands, and you end up telling the standards bodies that <a href="https://dvcs.w3.org/hg/IndexedDB/raw-file/default/Overview.html">it&rsquo;s a huge mess</a>, or
that <a href="http://www.whatwg.org/specs/web-apps/current-work/multipage/offline.html">it solves half of your problems half of the time</a>.</p>

<p>Despite all this, we&rsquo;ve somehow done OK. Actually, a bit more than OK, given that the web is the most successful
platform ever. How did we manage this?</p>

<p>Well, we wrap up APIs with horrible usability into ones that are quite pleasant, like jQuery. We &ldquo;prolyfill,&rdquo; creating
libraries like Sizzle to implement CSS selector matching, or libraries like Angular to implement custom elements, in the
hope that eventually native support will appear. We transpile from languages like CoffeeScript or SASS to add new
features to our authoring languages. And one case, promises, we even
<a href="http://www.slideshare.net/domenicdenicola/boom-promisesa-was-born">built an interoperable standard from the ground up</a>.</p>

<p>We need our platform to be better, and so we <em>make</em> it better, by ourselves.</p>

<h2 id="the-extensible-web-manifesto">The Extensible Web Manifesto</h2>

<p>The <a href="http://extensiblewebmanifesto.org/">Extensible Web Manifesto</a> is standards bodies saying they&rsquo;re ready to do
their part. Until now, we, the developers, have been shouldering all the work, writing massive JavaScript libraries or
transpilers to reinvent basic functionality.</p>

<p>There&rsquo;s a better way, where we work together toward the future.</p>

<p>What these standards bodies have realized is that the web platform is our language, but like all languages, it must
evolve.</p>

<p>This evolution of our shared language takes place in two acts:</p>

<ol>
<li>extending our basic vocabulary;</li>
<li>starting to <a href="http://briankardell.wordpress.com/2013/05/17/dropping-the-f-bomb/">incorporate &ldquo;slang&rdquo;</a>.</li>
</ol>

<h2 id="extending-our-vocabulary">Extending our Vocabulary</h2>

<p>Extending our vocabulary means two things:</p>

<ul>
<li><p><em>Explaining the features of the platform that are already there.</em> Wouldn&rsquo;t it be weird if we had compound words like
&ldquo;scifi,&rdquo; but didn&rsquo;t have the words &ldquo;science&rdquo; or &ldquo;fiction&rdquo;? If some standards body, perhaps the
<a href="https://en.wikipedia.org/wiki/Acad%C3%A9mie_fran%C3%A7aise">French Making Up Words Consortium</a>, just handed us the
word &ldquo;sandpaper,&rdquo; but we had no way in our language to talk about &ldquo;sand&rdquo; or &ldquo;paper&rdquo; individually? The web is like
that today, and we&rsquo;ll go over a few examples.</p></li>
<li><p><em>Giving you new low-level features that you can use</em>. If you wanted to invent the word &ldquo;scifi,&rdquo; somebody had better
have come up with the words for &ldquo;science&rdquo; and &ldquo;fiction&rdquo;! Similarly, there&rsquo;s lots of things we just don&rsquo;t have &ldquo;words&rdquo;
for on the web, yet. That&rsquo;s where native apps are hurting us.</p></li>
</ul>

<p>So with this in mind, let&rsquo;s look at some examples.</p>

<h3 id="custom-elements">Custom Elements</h3>

<p>The most fundamental unexplained gap in the platform is simply: how do those damn elements even work?</p>

<p>Somehow, you feed a string containing some angle brackets into the browser, and they get turned into these JS objects
with terrific APIs, which we call &ldquo;the DOM.&rdquo; How did that happen?</p>

<p><a href="https://dvcs.w3.org/hg/webcomponents/raw-file/default/spec/custom/index.html">Custom elements</a> explain this process,
saying that you register a mapping of tag names to element prototypes with the browser, and that&rsquo;s what the HTML parser
is actually using under the hood. This is great! This is the democratization of HTML!</p>

<p>And better yet, this means no more crazy widget libraries with their own crazy semantics. No more jQuery UI with its
<code>.option</code> thing (sometimes a setter, sometimes a getter, sometimes a method call); no more Dojo digits; no more
Bootstrap craziness; no more WinJS with its funky <code>winControl</code> property. Just tags, that turn into elements, which
behave like you&rsquo;d expect: they have properties, getters, setters, methods, and all that.</p>

<h3 id="the-shadow-dom">The Shadow DOM</h3>

<p>But what about the existing tags? Half of the reason these widget libraries exist is so that you can create your own
stupid <code>&lt;select&gt;</code> element, because the existing one isn&rsquo;t styleable or customizable.</p>

<p>In general, think of all the &ldquo;magic&rdquo; tags that exist today, like <code>&lt;select&gt;</code>, or <code>&lt;input type=&quot;date&quot;&gt;</code>, or <code>&lt;details&gt;</code>,
or <code>&lt;video&gt;</code>, or even good old <code>&lt;li&gt;</code>, whose bullet seems to come out of nowhere. In all cases, there&rsquo;s some extra
&ldquo;stuff&rdquo; the browser is creating, and allowing users to interact with, and sometimes even allowing you to style via
ridiculous vendor-prefixed pseudo-elements like <code>::-moz-placeholder</code>. But where does this extra stuff live?</p>

<p>The answer is: in the <a href="https://dvcs.w3.org/hg/webcomponents/raw-file/tip/spec/shadow/index.html">shadow DOM</a>. And what&rsquo;s
great about the shadow DOM, is that once we actually have a realistic basis for these hidden parts of the DOM, in
reality instead of in C++ magic-land, you&rsquo;ll be able to actually start hooking into them instead of rebuilding an entire
element just to customize its behavior and styling. That day is
<a href="https://groups.google.com/a/chromium.org/d/msg/blink-dev/ZAdZJWahyF8/lOInKCTbmrUJ">almost here</a>.</p>

<h3 id="web-audio">Web Audio</h3>

<p>The <a href="https://dvcs.w3.org/hg/audio/raw-file/tip/webaudio/specification.html">web audio API</a> is a good example of both
facets of the &ldquo;new vocabulary&rdquo; theme. You can do fundamentally new things with web audio, like positional audio or audio
synthesis or so many other cool possibilities.</p>

<p>But remember the <code>&lt;audio&gt;</code> tag, from way back in 2009? It&rsquo;s kind of the quintessential instance of &ldquo;here&rsquo;s some C++
magic thrown over the wall to you web developers; have fun!&rdquo; Well, from an extensible web perspective, the <code>&lt;audio&gt;</code> tag
should be explained in terms of web audio.</p>

<h3 id="etcetera">Etcetera</h3>

<p>There are of course many other APIs which exist solely to expose a new low-level hardware or platform feature to the web
platform. One of the older examples on the hardware side is the
<a href="http://www.w3.org/TR/geolocation-API/">geolocation API</a>. On the software side, good examples include the
<a href="http://notifications.spec.whatwg.org/">notifications API</a> and <a href="http://fullscreen.spec.whatwg.org/">fullscreen API</a>. But
more and more are popping up as we attempt to close all the gaps preventing full parity with native apps; one particular
driver of this is the work on Firefox OS and the related <a href="http://www.w3.org/2009/dap/">device APIs</a>.</p>

<h3 id="es6-and-es7">ES6 and ES7</h3>

<p>Finally, I want to call out ECMAScript 6 (which is nearing finalization) and ECMAScript 7 (for which efforts are just
starting to ramp up). Extending the web&rsquo;s programming language is adding new vocabulary at its most literal level, and
the TC39 committee driving the evolution of ECMAScript does not disappoint in their efforts here.</p>

<p>In ES6 we&rsquo;ll be getting subclassable built-in objects, so that you can finally extend <code>Array</code> or <code>Date</code> or the new <code>Map</code>
and <code>Set</code> types, in a way that actually works. We&rsquo;ll also be getting proxies, which allow an object almost-complete
control over the meta-object protocol underlying all interactions with it. And for ES7, the proposal for
<code>Object.observe</code> is starting to firm up. Plus there is talk of adding weak references to the language, now that some of
their trickier aspects have been worked out.</p>

<h2 id="incorporating-slang">Incorporating Slang</h2>

<p>The second half of the extensible web philosophy is that we need to tighten the feedback loop between developers and
standards bodies.</p>

<p>Think about it: you get all these neat new low-level tools, and you build great things out of them. But you end up
downloading megabytes of JavaScript, or transpiling your code, just to get the base platform in place. This is why
almost every web page uses jQuery: because the platform itself hasn&rsquo;t stepped up to the plate and incorporated jQuery&rsquo;s
innovations back in.</p>

<p>In short, we need to incorporate this kind of invented &ldquo;slang&rdquo; back into our shared language. Let&rsquo;s take a look at some
of the examples of this so far.</p>

<h3 id="&lt;template&gt;"><code>&lt;template&gt;</code></h3>

<p>The <a href="http://www.html5rocks.com/en/tutorials/webcomponents/template/"><code>&lt;template&gt;</code> element</a> is a generalization of the
common <code>&lt;script type=&quot;text/x-template&quot;&gt;</code> trick. By rolling it into the browser, additional benefits can be realized,
allowing the template tree to be treated as an inert version of a real DOM tree, and for the element parsing and
serialization rules to specifically call out templating use cases.</p>

<h3 id="&lt;dialog&gt;"><code>&lt;dialog&gt;</code></h3>

<p>The <a href="http://developers.whatwg.org/commands.html#the-dialog-element"><code>&lt;dialog&gt;</code> element</a> obviates all of the annoying
dialog or &ldquo;lightbox&rdquo; libraries we keep having to ship, each with their own strange semantics. Instead, it&rsquo;s a simple
tag, with some imperative APIs, some declarative features, and a nice <code>::backdrop</code> pseudo-element. Sweet!</p>

<h3 id="css-improvements">CSS Improvements</h3>

<p>CSS is slowly but surely starting to roll in innovations from SASS and elsewhere.
<a href="http://dev.w3.org/csswg/css-hierarchies/">CSS hierarchies</a>, still under development, brings SASS&rsquo;s nested selectors to
the browser. <a href="http://dev.w3.org/csswg/css-variables/">CSS variables</a> uses a clever trick to get something with the same
benefits as the variables in SASS and others, but fitting in well with CSS&rsquo;s existing semantics. And
<a href="http://dev.w3.org/csswg/css-cascade/">CSS cascade</a> introduces the <code>unset</code> keyword which reduces all those complicated
CSS reset stylesheets rules to virtually nothing.</p>

<h3 id="pointer-events">Pointer Events</h3>

<p><a href="https://dvcs.w3.org/hg/pointerevents/raw-file/tip/pointerEvents.html">Pointer events</a> finally unify mouse and touch
events into a single abstraction. In one stroke, this obviates many libraries built to work around this strange
dichotomy introduced by mobile Safari, and around other strangeness relating to trying to use mouse events on a touch
device. They will be a welcome addition to the web platform.</p>

<h3 id="promises">Promises</h3>

<p>When a pattern is adopted by jQuery, Dojo, Angular, Ember, WinJS, and YUI, as well as many other popular dedicated
libraries, it&rsquo;s time to put it into the platform. <a href="https://github.com/domenic/promises-unwrapping">Promises</a> are on
track for ES6, and are being added to browsers now.</p>

<h2 id="what&#39;s-next?">What&rsquo;s Next?</h2>

<p>The extensible web is an ongoing project, and several efforts are being headed up to expose even more capabilities to
developers, or roll even more common patterns into the platform. Here&rsquo;s a brief taste of those I&rsquo;m watching closely.</p>

<h3 id="streams">Streams</h3>

<p><code>FileReader</code>, <code>XMLHttpRequest</code>, <code>getUserMedia</code>, <code>postMessage</code>, object URLs, <code>MediaStream</code>s… As
<a href="http://imgur.com/a/9vFGa#11">poignantly emphasized</a> in a brilliant presentation by Max Ogden, we&rsquo;re clearly missing a
unifying abstraction here, and that abstraction is streams.</p>

<p>Node.js has led the way with their battle-tested implementations, but they&rsquo;ve also learned some lessons we should be
sure to heed in order to design a good browser stream API. In the end, the goal is to be able to take various sources of
binary data (HTTP requests, camera data, payloads stored in IndexedDB, the output of a web audio graph, …) and pipe them
into various sinks (<code>&lt;img&gt;</code>, <code>&lt;video&gt;</code>, and <code>&lt;audio&gt;</code> tags; other windows, frames, or workers; filesystem or remote HTTP
endpoints; or completely custom consumption code). It&rsquo;s going to be really cool, but we have some work to do before we
get something as well-designed as promises were.</p>

<h3 id="fetch">Fetch</h3>

<p>The basic act of doing an HTTP request has so much complexity on the web platform: cross-domain protection; redirect
following; deserialization from bytes; cookie jars; caches… We want to provide the basic building block, and then the
ability to layer and compose each of these features on top of it.</p>

<h3 id="zip/zlib">ZIP/ZLib</h3>

<p>There&rsquo;s active investigation going on into how to expose compression primitives to the web. This is clearly something
where native bindings will be more performant, and although there are
<a href="https://github.com/imaya/zlib.js">impressive polyfills</a>, native APIs, preferably with asynchronous off-main-thread
compression, will enable new scenarios. This work is in its early stages, so if you want to get involved, reach out.</p>

<h3 id="class-elements-extends-array"><code>class Elements extends Array</code></h3>

<p>My personal favorite new feature is the upcoming
<a href="http://dom.spec.whatwg.org/#collections:-elements"><code>Elements</code> collection</a>. It&rsquo;s a proper array subclass, using the
aforementioned ES6 subclassable builtin support, to give you something where you can <em>finally</em> use <code>forEach</code>, <code>reduce</code>,
<code>filter</code>, and all your favorite methods.</p>

<p>As part of this effort we added two methods, <code>query</code> and <code>queryAll</code>, to both <code>Element.prototype</code> and to
<code>Elements.prototype</code>. They act as better versions of <code>querySelector</code> and <code>querySelectorAll</code>, in that they treat relative
selectors like <code>&quot;&gt; div&quot;</code> the way you would expect instead of throwing an error. The versions on <code>Elements.prototype</code> act
as composite operations over all elements in the collection, just like in jQuery.</p>

<p>This is the beginning of a new, friendlier DOM, and I&rsquo;m pretty excited about it.</p>

<h3 id="what-else?">What Else?</h3>

<p>What do we need? What is preventing you from building the web apps of your dreams? You tell us! The extensible web is
waiting for your participation!</p>

<h2 id="getting-involved">Getting Involved</h2>

<p>The best thing you can do to get involved in the extensible web is <em>prolyfill</em>. There&rsquo;s only so much standardization
bandwidth to go around, so if you can create a de-facto standard like jQuery, or an open specification with wide
implementer suppport like Promises/A+, the world is waiting.</p>

<p>For example, if you wanted to figure out what a zlib API for the browser should look like, the best thing you can do is:</p>

<ul>
<li>Learn what the constraints and use cases are. (And not just your use cases, but everyone&rsquo;s!)</li>
<li>Design an API and library to prolyfill this gap.</li>
<li>Evangelize its use among developers, so that everyone recognizes it as the clear solution that browsers should just
ship and be done with it.</li>
</ul>

<p>More generally, if you want to be involved in helping the web succeed by guiding us toward better standards, then let&rsquo;s
talk. It&rsquo;s an area I&rsquo;ve been diving into over the last year, stemming from my Promises/A+ work but expanding into many
other things. Finding the right approach and content is delicate, as these people are jaded by newbies coming out of the
woodwork to demand feature X. But if you approach in good faith and avoid a prideful demeanor, they&rsquo;re often happy to
listen. I&rsquo;ve had a few success stories in this area already, and by this time next year I want to have a lot more.</p>

<p>In fact, I gave a talk on this subject at LXJS, titled
<a href="https://www.youtube.com/watch?v=hneN6aW-d9w&amp;hd=1">&ldquo;How to Win Friends and Influence Standards Bodies&rdquo;</a>. I&rsquo;ll probably
be adapting it into blog post form soon.</p>

<p>Another thing I wanted to note, before closing out, is that this extensible web philosophy has teeth. The W3C Technical
Architecture Group had four seats go up for reelection recently. Four &ldquo;reformers&rdquo; were elected at once: Yehuda Katz,
Alex Russell, Marcos Caceres, and Anne van Kesteren. The extensible web philosophy underlies their governance, as the
ultimate technical body which provides guidance and approval for all W3C specs. We&rsquo;ve already seen fruit here with their
<a href="https://github.com/w3ctag/spec-reviews/blob/master/2013/07/WebAudio.md">review of the web audio spec</a>,
<a href="https://github.com/w3ctag/spec-reviews">among others</a>. They&rsquo;ve been helping specs build on a solid grounding in
JavaScript fundamentals, and generally be less magic and more JavaScript. All their work is being done
<a href="https://github.com/w3ctag">on GitHub</a>, as are more and more specifications. This is happening!</p>

<p>To close, I&rsquo;d like to give a short message of hope. It&rsquo;s easy to think about all these cool things that are coming, and
then get depressed about having to support IE8 or Android 2.3 at your job. But that&rsquo;s the price we pay for an open,
interoperable web. We can&rsquo;t just march to the tune of a single vendor, upgrading in lockstep. Instead we work through
this collaborative, cooperative process, to build our shared language. In the end, <em>the future is longer than the past</em>,
and I look forward not only to living in that future, but to helping shape it, together with you all.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Explaining Away the Web's Magic]]></title>
    <link href="https://blog.domenic.me/explaining-away-the-webs-magic/"/>
    <updated>2013-06-10T00:00:00+00:00</updated>
    <id>https://blog.domenic.me/explaining-away-the-webs-magic</id>
    <content type="html"><![CDATA[<p>Today we revealed <a href="http://extensiblewebmanifesto.org/">The Extensible Web Manifesto</a>, calling for a new approach to
web standards that prioritizes new local-level capabilities in order to explain and extend higher-end platform features.
I want to take a minute to talk about what this means in practice, and why it&rsquo;s different from how we operate today.</p>

<h2 id="show-me-the-magic!">Show Me the Magic!</h2>

<p>The core of the extensible web manifesto says two things:</p>

<ul>
<li>We should <em>expose new low-level capabilities</em> to JavaScript</li>
<li>We should <em>explain existing high-level features</em> in terms of JavaScript</li>
</ul>

<p>The first of these is fairly obvious, but important. It&rsquo;s this goal that has brought us things that were previously
restricted to native apps or Flash, e.g. webcam and geolocation access, or WebGL. Even something as simple as the page
visibility API is a nice, low-level capability that helps us build our apps in ways we couldn&rsquo;t do before.</p>

<p>What all of these low-level APIs have in common is that they&rsquo;re exposing &ldquo;C++ magic&rdquo; to us, the web developers. They&rsquo;re
bridging the gap between native hardware and OS capabilities, into the realm of web applications. This is good. This is
where the magic belongs: where our technology fails us.</p>

<p>The second point is where things get subtle. Because it turns out there&rsquo;s a lot more C++ magic going on in your browser
than just access to hardware, or to OpenGL bindings. Arguably the biggest amount of magic in the web platform is the
magic we take for granted: the magic that translates declarative HTML and CSS into what we see on the screen and
manipulate with JavaScript.</p>

<p>This is the more revolutionary part of the extensible web manifesto. It&rsquo;s drawing a line in the sand and saying: <strong>the
C++ magic stops here</strong>. We need to stop building high-level features of the platform out of magic when it&rsquo;s not
necessary to do so, and we need to explain the existing features in terms of JavaScript technology—not C++ magic—at
least until we bottom out at the low-level hardware capabilities discussed above. By taking this stand, we enable users
to extend the web platform without rebuilding it from scratch.</p>

<h2 id="#extendthwebforward-in-practice">#extendthwebforward In Practice</h2>

<p><strong>Custom tags</strong> are a great example of this principle in action. If you stick to a pre-defined list defined by the W3C,
then you can use your declarative HTML all over the place. Each tag gets turned into its own JavaScript counterpart via
the parser, whether it be the humble transformation of <code>&lt;p&gt;</code> into <code>HTMLParagraphElement</code> or the complex wirings between
<code>&lt;img&gt;</code> and <code>HTMLImageElement</code>.</p>

<p>Everything the W3C doesn&rsquo;t know about, however, gets turned into the featureless blob that is <code>HTMLUnknownElement</code>. Hrm.</p>

<p>There&rsquo;s clearly a lot of magic going on here, most of it encapsulated in that &ldquo;parser&rdquo; thing. What if the parser was
extensible, and could be explained in terms of a JavaScript API? What if we pushed the magic further back? A good first
step might be allowing
<a href="http://www.polymer-project.org/platform/custom-elements.html">the registration of custom elements</a>. That way, we could
explain the inner workings of this magic parser in terms of how it looks up an element name in a registry, and then
derives instances from that registry. This has a wonderful emergent property as well: now that HTML elements are
explained by a C++ parser turning HTML into JavaScript, our JavaScript objects can use the usual mechanisms of the
language, like prototypal inheritance and constructors, to build on existing HTML elements.</p>

<p>The <strong>shadow DOM</strong> is another of my favorite examples. While <code>&lt;p&gt;</code> might be a relatively non-magical element, clearly
there&rsquo;s a lot of crazy stuff going on with <code>&lt;select&gt;</code>! And don&rsquo;t get me started on <code>&lt;audio&gt;</code> and <code>&lt;video&gt;</code>. It&rsquo;s as if
there&rsquo;s a whole, um, shadow DOM, hidden underneath the one we see, accessible only by C++. The goal of the shadow DOM
spec, going back to its <a href="http://glazkov.com/2011/01/14/what-the-heck-is-shadow-dom/">earliest conception</a>, has been to
bring that magic out of C++ and explain it in terms of
<a href="http://www.html5rocks.com/en/tutorials/webcomponents/shadowdom/">JavaScript primitives</a>.</p>

<p>But it&rsquo;s not just these large examples, attempting to explain HTML. What about something as simple as … <strong>parsing
URLs</strong>? Clearly, the platform has this capability:</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s2">&quot;a&quot;</span><span class="p">);</span>
<span class="nx">a</span><span class="p">.</span><span class="nx">href</span> <span class="o">=</span> <span class="s2">&quot;http://infrequently.org/2012/04/bedrock/#comments&quot;</span><span class="p">;</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">protocol</span><span class="p">,</span> <span class="nx">a</span><span class="p">.</span><span class="nx">host</span><span class="p">,</span> <span class="nx">a</span><span class="p">.</span><span class="nx">pathname</span><span class="p">,</span> <span class="nx">a</span><span class="p">.</span><span class="nx">hash</span><span class="p">);</span>
</code></pre></div>
<p>But somehow, this capability got tied up inside the high-level abstraction of the <code>&lt;a&gt;</code> element, and isn&rsquo;t accessible
to us directly as JavaScript programmers. We&rsquo;re left reimplementing it, often
<a href="https://github.com/joyent/node/issues/5452">incorrectly</a>, on our own. It&rsquo;s this kind of travesty that work like
<a href="http://url.spec.whatwg.org/#constructors">the URL spec</a> in particular, and the extensible web movement in general, is
trying to prevent.</p>

<p>Let&rsquo;s keep going. What does this do?</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">els</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelectorAll</span><span class="p">(</span><span class="s2">&quot;:enabled&quot;</span><span class="p">);</span>
</code></pre></div>
<p>Well, hmm, something about <a href="http://www.w3.org/TR/css3-selectors/#enableddisabled">&ldquo;an enabled state&rdquo;</a>. I wonder what
that means. Probably something to do with
<a href="http://www.whatwg.org/specs/web-apps/current-work/multipage/association-of-controls-and-forms.html#enabling-and-disabling-form-controls:-the-disabled-attribute">the <code>disabled</code> attribute</a>. How did the browser know that? More magic! We passed in a string that&rsquo;s in a magic
list called &ldquo;CSS3 selectors spec,&rdquo; and it has some magic handler that turns that into &ldquo;elements where
<code>el.disabled === false</code>.&rdquo; This is a pretty high-level abstraction; could we explain it with technology instead of magic?
What about some kind of <strong>CSS selector registration</strong>?</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="nb">document</span><span class="p">.</span><span class="nx">registerSelector</span><span class="p">(</span><span class="s2">&quot;:enabled&quot;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">el</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="o">!</span><span class="nx">el</span><span class="p">.</span><span class="nx">disabled</span><span class="p">;</span>
<span class="p">});</span>
</code></pre></div>
<p>It&rsquo;s of course more complicated than that. To make this performant and sensible, we&rsquo;re going to need some way to ensure,
or at least assume, that the function passed is pure (i.e. side-effect free and gives the same answers to the same
inputs). But we <a href="http://wiki.ecmascript.org/doku.php?id=strawman:data_parallelism">need something like that anyway</a>.
It&rsquo;ll happen.</p>

<p>There&rsquo;s so many more examples. Once you start seeing the web browser in this way, trying to pick apart and explain its
C++ magic in terms of JavaScript technology, you&rsquo;ll have a hard time un-seeing how much work needs to be done. Here&rsquo;s
just a brief scratchpad idea list:</p>

<ul>
<li><a href="https://gist.github.com/wycats/cf73dd4c974352fcb767">Low-level HTTP fetching and data streams</a></li>
<li>More general and composable binary data streams, <a href="http://imgur.com/a/9vFGa#11">à la Node.js</a></li>
<li><a href="http://www.polymer-project.org/platform/web-animations.html">Unified animations primitives</a></li>
<li><a href="https://github.com/slightlyoff/NavigationController/blob/master/explainer.md">A way of responding to requests when your app is offline</a></li>
<li>Exposed GZIP capabilities</li>
<li>Custom scrollbars</li>
<li>Custom tooltips</li>
<li><a href="http://davidwalsh.name/html5-context-menu">Custom context menus</a></li>
<li><a href="http://lists.w3.org/Archives/Public/www-dom/2013AprJun/0188.html">Deferred, but synchronous, exception handling</a></li>
<li><a href="http://updates.html5rocks.com/2012/11/Respond-to-change-with-Object-observe">Observing and responding to changes to JS objects</a></li>
</ul>

<h2 id="what&#39;s-next">What&rsquo;s Next</h2>

<p>The extensible web manifesto was a statement of intent, and of prioritization.</p>

<p>Some of the reaction to it has been along the lines of &ldquo;Well … duh!?&rdquo; To which I reply: exactly! This <em>should</em> be obvious. But if you look at how the standards process has worked
<a href="https://medium.com/the-future-of-the-web/2fcd1c1bb32">historically</a>, that&rsquo;s not what happened. Implementers handed down
new high-level solutions from their ivory towers, <a href="http://news.cnet.com/8301-17939_109-10281477-2.html">without knowing</a>
if they actually solved the problems we as developers actually had. Or they knew we needed some primitive, but gave us
<a href="http://updates.html5rocks.com/2013/03/What-s-the-CSS-scope-pseudo-class-for">a slightly messed-up version of it</a>, due
to lack of attention to common use cases. It&rsquo;s been somewhat tragic, actually.</p>

<p>The publication of the extensible web manifesto is taking a stand for a process that should help avoid these missteps,
by doing what we should have been doing all along. In short, <em>prioritize efforts to expose low-level tools</em>; then,
watch what the developer community converges on and fold that back into the web platform <em>now that we know it solves
common high-level use cases</em>. And this ideology has teeth: the W3C&rsquo;s newly-reformed
<a href="http://www.w3.org/2001/tag/2013/03/18-agenda">Technical Architecture Group</a> has taken on the case of overseeing this
effort, ensuring that new APIs are introduced to explain away the C++ magic in terms of idiomatic JavaScript.</p>

<p>This is something I can get behind.</p>
]]></content>
  </entry>
  
</feed>
